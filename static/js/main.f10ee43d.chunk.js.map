{"version":3,"sources":["webgl/webgl-app.js","utility/animation.js","Pages/Landing.js","components/speechRec.js","Pages/Visualization.js","Pages/Count.js","Pages/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["WebGLApp","htmlElem","windowInfo","setup","console","log","scene","Scene","background","Color","camera","PerspectiveCamera","width","height","position","set","lookAt","tanFOV","Math","tan","PI","fov","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","controls","OrbitControls","update","createGridHelper","gridHelper","GridHelper","add","createCube","geometry","BoxGeometry","material","MeshPhongMaterial","color","wireframe","cube","Mesh","createLights","ambientLight","AmbientLight","createSphere","texture","TextureLoader","load","err","MeshBasicMaterial","map","SphereGeometry","sphere","createObjs","renderScene","render","handleResize","newWidth","newHeight","aspect","updateProjectionMatrix","rotation","x","z","rafId","requestAnimationFrame","isRendering","cancelAnimationFrame","this","getDefaultTimeline","node","delay","original","dest","timeline","gsap","paused","opacity","to","duration","ease","Power2","easeInOut","then","Landing","className","Dictaphone","useSpeechRecognition","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","onClick","SpeechRecognition","startListening","stopListening","Visualization","Count","Intro","App","containerRef","useRef","webglApp","useEffect","current","window","innerWidth","innerHeight","addEventListener","onWindowResize","removeEventListener","id","ref","location","key","pathname","TransitionGroup","component","Transition","native","appear","onEnter","play","playTransitionIn","onExiting","playTransitionOut","timeout","enter","exit","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f10ee43d.chunk.js","sourcesContent":["import {\n  Scene,\n  Color,\n  PerspectiveCamera,\n  WebGLRenderer,\n  BoxGeometry,\n  MeshBasicMaterial,\n  Mesh,\n  GridHelper,\n  MeshPhongMaterial,\n  PointLight,\n  AmbientLight,\n  SphereGeometry,\n  TextureLoader,\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport default class WebGLApp {\n  constructor(htmlElem, windowInfo) {\n    this.htmlElem = htmlElem;\n    this.windowInfo = windowInfo;\n    this.rafId = 0;\n    this.isRendering = false;\n  }\n\n  setup = () => {\n    console.log(\"set up with DOM elem \", this.htmlElem);\n    this.scene = new Scene();\n    this.scene.background = new Color(0xb6eafa);\n    this.camera = new PerspectiveCamera(\n      75,\n      this.windowInfo.width / this.windowInfo.height,\n      1,\n      1000\n    );\n    this.camera.position.set(5, 5, 10);\n    this.camera.lookAt(this.scene.position);\n    this.tanFOV = Math.tan(((Math.PI / 180) * this.camera.fov) / 2);\n    this.renderer = new WebGLRenderer({ antialias: true });\n    this.renderer.setSize(this.windowInfo.width, this.windowInfo.height);\n    this.renderer.shadowMap.enabled = true;\n    this.htmlElem.appendChild(this.renderer.domElement);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n  };\n\n  createGridHelper = () => {\n    this.gridHelper = new GridHelper(10, 10);\n    this.scene.add(this.gridHelper);\n    console.log(\"created grid helper\", this.gridHelper);\n  };\n\n  createCube = () => {\n    let geometry = new BoxGeometry(2, 2, 2);\n    let material = new MeshPhongMaterial({\n      color: new Color(\"Orange\"),\n      wireframe: true,\n    });\n    this.cube = new Mesh(geometry, material);\n    this.scene.add(this.cube);\n    console.log(\"created cube\", this.cube);\n  };\n\n  createLights = () => {\n    this.ambientLight = new AmbientLight(0x404040);\n    this.scene.add(this.ambientLight);\n  };\n\n  createSphere = () => {\n    const loader = new TextureLoader();\n    const texture = loader.load(\n      \"assets/texture/ir1.jpg\",\n      function (texture) {\n        console.log(\"loaded\", texture);\n      },\n      null,\n      function (err) {\n        console.log(\"load error\", err);\n      }\n    );\n    console.log(texture);\n    const material = new MeshBasicMaterial({\n      map: texture,\n    });\n    const geometry = new SphereGeometry(2, 32, 32);\n    this.sphere = new Mesh(geometry, material);\n    this.scene.add(this.sphere);\n  };\n\n  createObjs = () => {\n    // this.createGridHelper();\n    this.createLights();\n    this.createSphere();\n  };\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  handleResize = (newWidth, newHeight) => {\n    this.camera.aspect = newWidth / newHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(newWidth, newHeight);\n  };\n\n  update = () => {\n    this.sphere.rotation.x += 0.01;\n    this.sphere.rotation.z += 0.01;\n    this.controls.update();\n    this.rafId = requestAnimationFrame(this.update);\n    this.renderScene();\n  };\n\n  render = (render) => {\n    if (this.isRendering === render) return;\n    this.isRendering = render;\n    if (render) {\n      this.update();\n    } else {\n      cancelAnimationFrame(this.rafId);\n    }\n  };\n}\n","import gsap, { Power2 } from \"gsap\";\n\nconst getDefaultTimeline = (node, delay, original, dest) => {\n  const timeline = gsap.timeline({ paused: true });\n  timeline.set(node, { opacity: original });\n  timeline.to(node, {\n    opacity: dest,\n    duration: 1.5,\n    ease: Power2.easeInOut,\n    delay: delay,\n  });\n  timeline.then(() => {\n    console.log(\"Finished page transition animation\");\n  });\n  return timeline;\n};\n\nexport const playTransitionIn = (pathname, node) => {\n  const delay = 1;\n  const timeline = getDefaultTimeline(node, delay, 0, 1);\n  timeline.play();\n};\n\nexport const playTransitionOut = (pathname, node) => {\n  const delay = 0;\n  const timeline = getDefaultTimeline(node, delay, 1, 0);\n  timeline.play();\n};\n","import \"../styles/utility.css\";\nimport \"../styles/app.css\";\nimport \"../styles/landing.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Landing() {\n  return (\n    <div className=\"root\">\n      <div className=\"landing__container\">\n        <h1 className=\"title__text\"> Title </h1>\n        <p className=\"landing__blurb\">\n          {\" \"}\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat.\n        </p>\n        <Link to=\"/intro\">\n          <button> Begin Your Journey </button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;\n","import React from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nconst Dictaphone = () => {\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n  } = useSpeechRecognition();\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return (\n    <div>\n      <p>Microphone: {listening ? \"on\" : \"off\"}</p>\n      <button onClick={SpeechRecognition.startListening}>Start</button>\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\n      <button onClick={resetTranscript}>Reset</button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\nexport default Dictaphone;\n","import \"../styles/utility.css\";\nimport Dictaphone from \"../components/speechRec\";\n\nfunction Visualization() {\n  return (\n    <div className=\"root\">\n      <p> Visualization page UI</p>\n      <Dictaphone />\n    </div>\n  );\n}\n\nexport default Visualization;\n","import \"../styles/utility.css\";\n\nfunction Count() {\n  return (\n    <div className=\"root\">\n      <p> Count page UI</p>\n    </div>\n  );\n}\n\nexport default Count;\n","import \"../styles/utility.css\";\nimport \"../styles/intro.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Intro() {\n  return (\n    <div className=\"root\">\n      <div className=\"intro__container\">\n        <p> Intro page UI</p>\n        <div className=\"buttons\">\n          <button>\n            {\" \"}\n            <Link to=\"/visualization\"> Visualization </Link>{\" \"}\n          </button>\n          <button>\n            {\" \"}\n            <Link to=\"/counting-technique\"> 5-4-3-2-1 </Link>{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Intro;\n","import \"./App.css\";\nimport React, { useEffect, useRef } from \"react\";\nimport WebGLApp from \"./webgl/webgl-app\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport { Transition, TransitionGroup } from \"react-transition-group\";\nimport { playTransitionIn, playTransitionOut } from \"./utility/animation.js\";\nimport Landing from \"./Pages/Landing\";\nimport Visualization from \"./Pages/Visualization\";\nimport Count from \"./Pages/Count\";\nimport Intro from \"./Pages/Intro\";\n\nfunction App() {\n  const containerRef = useRef(null);\n  const webglApp = useRef(null);\n\n  useEffect(() => {\n    if (containerRef.current === null) return;\n    console.log(\"Initializing GL with: \", containerRef.current);\n\n    // Handler to call on window resize\n    function onWindowResize() {\n      webglApp.current.handleResize(window.innerWidth, window.innerHeight);\n    }\n\n    webglApp.current = new WebGLApp(containerRef.current, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n    webglApp.current.setup();\n    webglApp.current.createObjs();\n    webglApp.current.render(true);\n    window.addEventListener(\"resize\", onWindowResize, false);\n\n    return () => {\n      webglApp.current.render(false);\n      window.removeEventListener(\"resize\", onWindowResize, false);\n    };\n  }, []);\n  /* only want to run the function given to useEffect after the initial render,\n   * so we give it an empty array as second argument. */\n\n  useEffect(() => {});\n\n  return (\n    <div className=\"App\">\n      <div id=\"webgl\" ref={containerRef}></div>\n      <BrowserRouter>\n        <Route\n          render={({ location }) => {\n            const { pathname, key } = location;\n\n            return (\n              <TransitionGroup component={null}>\n                <Transition\n                  native\n                  key={key}\n                  appear={true}\n                  onEnter={(node) => playTransitionIn(pathname, node)}\n                  onExiting={(node) => playTransitionOut(pathname, node)}\n                  timeout={{ enter: 250, exit: 250 }}\n                >\n                  <Switch location={location}>\n                    <Route exact path=\"/CDT-project-01\" component={Landing} />\n                    <Route path=\"/intro\" component={Intro} />\n                    <Route path=\"/visualization\" component={Visualization} />\n                    <Route path=\"/counting-technique\" component={Count} />\n                  </Switch>\n                </Transition>\n              </TransitionGroup>\n            );\n          }}\n        ></Route>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n/**\n *   <TransitionGroup component={null}>\n   <Transition\n                  native\n                  key={key}\n                  appear={true}\n                  onEnter={(node) => playTransitionIn(pathname, node)}\n                  onExiting={(node) => playTransitionOut(pathname, node)}\n                  timeout={{ enter: 550, exit: 350 }}\n                >\n                  <Switch location={location}>\n                    <Route exact path=\"/\" component={Landing} />\n                    <Route path=\"/breathe\" component={Breathe} />\n                  </Switch>\n                </Transition>\n\n              </TransitionGroup>\n */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}